
def progress_colour(progress)
  case progress
  when 'no_progress'
    "7B68EE"
  when 'poor', 'behind'
    "FF0000"
  when 'fair', 'somewhat-behind'
    "FFFF00"
  when 'good', 'on-pace'
    "98FB98"
  when 'excellent', 'ahead'
    "00FF00"
  else
    "FFFFFF"
  end
end

def measurables(stream, state_language, quarter, project, sub_project)
  pq = pretty_quarter(quarter, true)
  next_pq = pretty_quarter(next_quarter(quarter), true)
  targets = QuarterlyTarget.joins(:deliverable).
      where(deliverables: {ministry_id: stream.id}, state_language: state_language).
      where('quarter BETWEEN ? AND ?', quarter, next_quarter(quarter)).to_a
  values_table = []
  values_table << ['', pq, pq, 'Verses Completed', next_pq]
  values_table << ['', 'Target', 'Actual', 'for each step', 'Next Target']
  stream.deliverables.where(funder_interest: true).order(:number).each do |deliverable|
    unless deliverable.disabled?
      target = targets.select{ |t| t.deliverable_id == deliverable.id and t.quarter == quarter }.first
      target_value = target ? target.value : ''
      actual = quarterly_actual(state_language.id, deliverable, quarter, project, sub_project)
      next_target = targets.select{ |t| t.deliverable_id == deliverable.id and t.quarter == next_quarter(quarter) }.first
      next_target_value = next_target ? next_target.value : ''
      values_table << [deliverable.short_form.en, target_value, actual, '', next_target_value]
    end
  end
  # verses completed column is only for translation stream
  values_table.each{ |row| row.delete_at(3) } unless stream.code == 'TR'
  values_table
end

def clean_narrative_q(i)
  question = I18n.t("narrative_questions.q#{i}_html")
  if question.include?('<br>')
    question.split('<br>').drop(1).join(' ')
  else
    question
  end
end

def narrative_questions(quarterly_evaluation)
  narrative_questions = []
  (1..4).each do |i|
    answer = quarterly_evaluation.send("question_#{i}")
    if answer.present?
      narrative_questions << [clean_narrative_q(i)]
      narrative_answer = Caracal::Core::Models::TableCellModel.new do
        answer.split("\r\n").each do |txt|
          p txt
        end
      end
      narrative_questions << [narrative_answer]
    end
  end
  narrative_questions
end

def report(quarterly_evaluation, docx)
  table_data = [
      ["Impact story for #{quarterly_evaluation.ministry.name.en} in #{quarterly_evaluation.state_language.language_name}:"],
  ]
  report_content = Caracal::Core::Models::TableCellModel.new do
    background 'FFF9E7'
    quarterly_evaluation.report.content.split("\r\n").each do |txt|
      p txt
    end
  end
  table_data << [report_content]
  docx.table table_data, border_line: :none do
    cell_style rows[0], style: 'Heading3', background: 'F2F2F2'
  end
  quarterly_evaluation.report.pictures.each do |picture|
    if Rails.env.production?
      begin
        if picture.ref?
          docx.img picture.ref_url do
            width   400
            height  400
            align   :right
            top     10
            bottom  10
            left    10
            right   10
          end
        end
      rescue OpenURI::HTTPError => e
        docx.p '<image missing>'
      end
    else
      if picture.ref?
        docx.img "#{Rails.root}/public#{picture.ref_url}" do
          width   400
          height  400
          align   :right
          top     10
          bottom  10
          left    10
          right   10
        end
      end
    end
  end
end

docx.style do
  id              'StreamHead'  # sets the internal identifier for the style.
  name            'stream heading' # sets the friendly name of the style.
  type            'paragraph' # sets the style type. accepts `paragraph` or `character`
  size            28          # sets the font size. units in half points.
  bold            true
  align           :left       # sets the alignment. accepts :left, :center, :right, and :both.
  top             100         # sets the spacing above the paragraph. units in twips.
  bottom          0           # sets the spacing below the paragraph. units in twips.
  indent_left     300         # sets the left indent. units in twips.
  indent_right    300         # sets the rights indent. units in twips.
end

state_languages = @project.state_languages.order(:id)
if @sub_project
  state_languages = state_languages.to_a.select{ |sl| @sub_project.language_streams.exists?(state_language_id: sl.id) }
end

docx.h1 "Quarterly Report for #{@sub_project ? @sub_project.name : @project.name}"
docx.p
docx.h3 "Period: #{pretty_quarter(@quarter)}"
docx.p "Management Supervisors: #{@project.project_supervisors.management.map{ |ps| ps.name }.to_sentence}"

multi_state = @project.geo_states.uniq.count > 1

break_next = false
state_languages.each do |state_language|
  if break_next
    docx.page
    break_next = false
  end
  if state_language.language.pseudonym.present?
    docx.h2 "#{state_language.language_name} (#{state_language.pseudonym})"
  else
    docx.h2 state_language.name(multi_state)
  end
  streams = @project.ministries.order(:code).to_a
  if @sub_project
    streams = streams.select {|s| @sub_project.language_streams.exists?(state_language_id: state_language.id, ministry_id: s.id)}
  end
  # put translation and storying first
  streams = streams.select{ |s| s.code == 'TR' } + streams.select{ |s| s.code == 'ST' } + streams.select{ |s| s.code != 'TR' and s.code != 'ST' }
  streams.each do |stream|

    if @sub_project
      sp_id = @sub_project.id
    else
      sp_ids = @project.language_streams.where(state_language: state_language, ministry: stream).pluck(:sub_project_id).uniq
      sp_id = sp_ids.length == 1 ? sp_ids[0] : nil
    end
    quarterly_evaluation = QuarterlyEvaluation.find_by(
        project: @project,
        sub_project_id: sp_id,
        state_language: state_language,
        ministry: stream,
        quarter: @quarter
    )

    if break_next
      docx.page
    else
      docx.p
      break_next = true
    end
    if quarterly_evaluation and quarterly_evaluation.progress.present?
      prog_colour = progress_colour(quarterly_evaluation.progress)
    else
      prog_colour = 'FFFFFF'
    end

    head = [["#{stream.name.en} in #{state_language.language_name}"]]
    if quarterly_evaluation and quarterly_evaluation.progress.present?
      head << ["progress this quarter: #{quarterly_evaluation.progress.humanize}"]
    end
    docx.table head, border_line: :none do
      cell_style rows[0], style: 'StreamHead', background: prog_colour
      cell_style rows[1], align: :center, background: prog_colour
    end

    if quarterly_evaluation and quarterly_evaluation.approved?
      if File.file?(image_url('approved.png'))
        docx.img image_url('approved.png') do
          width 150
          height 30
          align :right
        end
      else
        docx.p 'Report approved by manager.', align: :right
      end
    else
      docx.p 'Pending approval by manager', align: :right
    end

    measurables_data = measurables(stream, state_language, @quarter, @project, @sub_project)
    measurable_colours = measurables_data.map{ |row| progress_colour(assessment(row[1], row[2])) }
    measurables_data = measurables_data.each do |row|
      row[1] = row[1].blank? ? 'No specific target' : row[1]
      row[-1] = row[-1].blank? ? 'No specific target' : row[-1]
    end
    docx.h3 'Measurables'
    docx.table measurables_data, border_size: 1 do
      cell_style rows[0], bold: true
      cell_style rows[1], bold: true
      (2..measurables_data.length - 1).each do |row|
        cell_style rows[row][2], background: measurable_colours[row]
      end
      (1..measurables_data[0].length - 1).each do |col|
        cell_style cols[col], align: :center
      end
    end

    if quarterly_evaluation
      narrative_data = narrative_questions(quarterly_evaluation)
      if narrative_data.any?
        docx.p
        docx.table narrative_data, border_size: 1 do
          (0..narrative_data.length - 1).each do |row|
            cell_style rows[row], background: row.even? ? 'F2F2F2' : 'FFF9E7'
          end
        end
      end
      if quarterly_evaluation.report.present?
        docx.p
        report(quarterly_evaluation, docx)
      end
    end
    docx.p
    docx.hr size: 10
  end
end

docx.page_numbers true, align: :center, label: "#{@sub_project ? @sub_project.name : @project.name}\tPage "